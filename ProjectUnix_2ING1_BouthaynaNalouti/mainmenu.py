# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import subprocess
from time import sleep


class Ui_Dialog(object):
    def __init__(self):
        self.choice = 1
        self.server = None
        self.client = None
    def setupUi(self, Dialog):
        Dialog.setObjectName("Interface Unix")
        Dialog.resize(814, 525)
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(540, 100, 251, 311))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 90, 531, 321))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.serverPlainText = QtWidgets.QPlainTextEdit(self.verticalLayoutWidget_2)
        self.serverPlainText.setReadOnly(True)
        self.serverPlainText.setObjectName("serverPlainText")
        self.verticalLayout_2.addWidget(self.serverPlainText)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.clientPlainText = QtWidgets.QPlainTextEdit(self.verticalLayoutWidget_2)
        self.clientPlainText.setReadOnly(True)
        self.clientPlainText.setObjectName("clientPlainText")
        self.verticalLayout_2.addWidget(self.clientPlainText)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Interface Unix"))
        self.pushButton_5.setText(_translate("Dialog", "Serveur"))
        self.pushButton_5.clicked.connect(self.start_serv)

        self.pushButton_4.setText(_translate("Dialog", "Client"))
        self.pushButton_4.clicked.connect(self.start_client)

        self.pushButton.setText(_translate("Dialog", "Sockets"))
        self.pushButton.clicked.connect(self.sockets)

        self.pushButton_2.setText(_translate("Dialog", "Tubes nomm√©es"))
        self.pushButton_2.setStyleSheet("background-color: blue")
        self.pushButton_2.clicked.connect(self.tubes)

        self.pushButton_3.setText(_translate("Dialog", "Quitter"))
        self.pushButton_3.clicked.connect(self.exit)

    def start_serv(self):
        serverLog = open("server_output.txt", "w+")
        # empty the log file
        serverLog.write("")
        if self.server is not None:
            self.server.kill()
            self.server = None
        if self.choice == 1:
             # Tubes (Projet 1)
            self.server = subprocess.Popen(['./Server'], cwd='./Tubes', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            #Sockets (Projet 2)
            self.server = subprocess.Popen(['./Server'], cwd='./Sockets', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        sleep(0.5)
        self.serverPlainText.setPlainText(serverLog.read())
        serverLog.close()


    def start_client(self):
        if self.server is None:
            self.clientPlainText.setPlainText("Server is not running...")
            return

        if self.client is not None:
            self.client.kill()

        if self.choice == 1:
            # Tubes (Projet 1)
            self.client = subprocess.Popen(['./Client'], cwd='./Tubes', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            #Sockets (Projet 2)
            self.client = subprocess.Popen(['./Client'], cwd='./Sockets', stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # essayer de se connecter au subprocess du client
        try:
            client_stdout, client_stderr = self.client.communicate(timeout=2)
        except subprocess.TimeoutExpired:
            self.client.kill()
            self.clientPlainText.setPlainText("Client timed out...")
            return
        if self.client.poll() is None:
            self.client.kill()
            self.clientPlainText.setPlainText("Client timed out...")
            return

        # Decoder les messages pour le client
        client_output = client_stdout.decode("utf-8")
        client_error = client_stderr.decode("utf-8")

        # afficher les messages au client
        self.clientPlainText.setPlainText(client_output)
        if client_error:
            self.clientPlainText.setPlainText(client_error)

        serverLog = open("server_output.txt", "r")
        self.serverPlainText.setPlainText(serverLog.read())
        serverLog.close()

    def sockets(self):
        if self.server is not None:
            self.server.kill()
            self.server = None
        self.choice = 2
        self.pushButton.setStyleSheet("background-color: blue")
        self.pushButton_2.setStyleSheet("background-color: white")
        self.serverPlainText.setPlainText("")
        self.clientPlainText.setPlainText("")
        serverLog = open("server_output.txt", "w")
        #vider fichier.txt
        serverLog.write("")
        serverLog.close()


    def tubes(self):
        if self.server is not None:
            self.server.kill()
            self.server = None
        self.choice = 1
        self.pushButton_2.setStyleSheet("background-color: blue")
        self.pushButton.setStyleSheet("background-color: white")
        self.serverPlainText.setPlainText("")
        self.clientPlainText.setPlainText("")
        serverLog = open("server_output.txt", "w")
        # vider fichier.txt
        serverLog.write("")
        serverLog.close()


    def exit(self):
        if self.server is not None:
            self.server.kill()
        if self.client is not None:
            self.client.kill()
        sys.exit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
